Introduction
============

``collective.converse`` integrates `converse.js <https://conversejs>`_ and the
`Prosody <https://prosody.im>`_ XMPP server into `Plone <https://plone.com>`_.

Features
========

* Manually or automatically subscribe to other users.
* With manual roster subscriptions, you can accept or decline contact requests.
* Chat statuses (online, busy, away, offline)
* Custom status messages
* Typing notifications (i.e when the contact is typing)
* Third person messages (/me )
* Multi-user chat in chatrooms
* Chatrooms can be configured (privacy, persistency etc.)
* Topics can be set for chatrooms
* Full name and profile picture support (via VCards)

Installation
============

First, you'll need to create a ``secrets.cfg`` file, with the following format:

    [prosody.cfg.lua]
    prosody_otp_seed = 
    prosody_token_secret = 

Then generate the secrets and insert them into that file, read the section
`Authentication`_ below.

Then run buildout:

    pip install -r requirements.txt
    ./bin/buildout

Integration
===========

Prosody is installed and configured via the `prosody.cfg` buildout profile.
Extend it in your own buildout in order to use it.

    [buildout]
    extends = /path/to/prosody.cfg

Authentication
==============

Plone generates [HMAC](https://en.wikipedia.org/wiki/HMAC) tokens
which contain time-based one-time-pin (TOTP) tokens and are hashed with SHA256.

Converse.js, the JavaScript XMPP client receives this token and then passes it
on to Prosody which verifies the tokens authenticity, i.e. it checks whether
the token was really generated by Plone.

For this to work, Plone and Prosody need to share a common secret key and a
secret OTP seed.

We use a Prosody modules **mod\_sasl\_hmac_md** to register a custom
SASL authentication mechanism (called "SASL-HMAC") and **mod\_auth\_hmac_md**
to create an authentication provider that accepts signed TOTP tokens.

Generating the secret key for the HMAC token
--------------------------------------------

The tokens are in HMAC-SHA256 format and are generated by Plone when a client
wants to sign in to Prosody (the XMPP server).

A private key needs to be generated that will be shared between Plone and 
Prosody. This key is used in the HMAC token construction in Plone and by
mod\_auth\_hmac.lua in Prosody to verify the HMAC token.

Your key needs to be 32 bytes (the HMAC specification recommends that the key
length is at least as long as the output of the hash function used, in our case
sha256 which outputs 32 byte strings).

You can generate the key as follows:

    >>> import pyotp
    >>> pyotp.random_base32(length=32)
    u'JYXEX4IQOEYFYQ2S3MC5P4ZT4SDHYEA7'

The key then needs to be added to `secrets.cfg`.

    prosody_token_secret = JYXEX4IQOEYFYQ2S3MC5P4ZT4SDHYEA7

Generating the TOTP secret
--------------------------

Each token contains a TOTP (time-based one-time-pin) which restricts that
token's validity to a specific time window which is usually a few minutes
starting from token creation.

For the TOTP we also need a shared secret key between Plone and Prosody.
This can be generated with [pyotp](https://pypi.python.org/pypi/pyotp).

    >>> import pyotp
    >>> pyotp.random_base32()
    u'XVGR73KMZH2M4XMY'

The key then needs to be added to `secrets.cfg`.

    prosody_otp_seed = XVGR73KMZH2M4XMY
